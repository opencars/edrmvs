// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/opencars/edrmvs/pkg/domain (interfaces: CustomerService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/opencars/edrmvs/pkg/domain/model"
	query "github.com/opencars/edrmvs/pkg/domain/query"
)

// MockCustomerService is a mock of CustomerService interface.
type MockCustomerService struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerServiceMockRecorder
}

// MockCustomerServiceMockRecorder is the mock recorder for MockCustomerService.
type MockCustomerServiceMockRecorder struct {
	mock *MockCustomerService
}

// NewMockCustomerService creates a new mock instance.
func NewMockCustomerService(ctrl *gomock.Controller) *MockCustomerService {
	mock := &MockCustomerService{ctrl: ctrl}
	mock.recorder = &MockCustomerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerService) EXPECT() *MockCustomerServiceMockRecorder {
	return m.recorder
}

// DetailsByCode mocks base method.
func (m *MockCustomerService) DetailsByCode(arg0 context.Context, arg1 *query.DetailsByCode) (*model.Registration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailsByCode", arg0, arg1)
	ret0, _ := ret[0].(*model.Registration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetailsByCode indicates an expected call of DetailsByCode.
func (mr *MockCustomerServiceMockRecorder) DetailsByCode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailsByCode", reflect.TypeOf((*MockCustomerService)(nil).DetailsByCode), arg0, arg1)
}

// Health mocks base method.
func (m *MockCustomerService) Health(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockCustomerServiceMockRecorder) Health(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockCustomerService)(nil).Health), arg0)
}

// ListByNumber mocks base method.
func (m *MockCustomerService) ListByNumber(arg0 context.Context, arg1 *query.ListByNumber) ([]model.Registration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByNumber", arg0, arg1)
	ret0, _ := ret[0].([]model.Registration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByNumber indicates an expected call of ListByNumber.
func (mr *MockCustomerServiceMockRecorder) ListByNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByNumber", reflect.TypeOf((*MockCustomerService)(nil).ListByNumber), arg0, arg1)
}

// ListByVIN mocks base method.
func (m *MockCustomerService) ListByVIN(arg0 context.Context, arg1 *query.ListByVIN, arg2 bool) ([]model.Registration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByVIN", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.Registration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByVIN indicates an expected call of ListByVIN.
func (mr *MockCustomerServiceMockRecorder) ListByVIN(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByVIN", reflect.TypeOf((*MockCustomerService)(nil).ListByVIN), arg0, arg1, arg2)
}
